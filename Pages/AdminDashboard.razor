@page "/admin/dashboard"
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

<PageTitle>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - Marketing Insights</PageTitle>

@if (!isAuthenticated)
{
    <div class="admin-loading">
        <div class="loading-spinner"></div>
        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
    </div>
}
else
{
    <div class="admin-dashboard">
        <header class="admin-header">
            <div class="admin-header-content">
                <h1>üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
                <div class="admin-user-info">
                    <span>üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                    <button @onclick="Logout" class="logout-btn">üö™ –í—ã–π—Ç–∏</button>
                </div>
            </div>
        </header>

        <main class="admin-main">
            <div class="admin-sidebar">
                <nav class="admin-nav">
                    <button @onclick="() => activeTab = TAB_CONTENT" 
                            class="nav-btn @(activeTab == TAB_CONTENT ? CSS_ACTIVE : CSS_EMPTY)">
                        üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    </button>
                    <button @onclick="() => activeTab = TAB_PAGES" 
                            class="nav-btn @(activeTab == TAB_PAGES ? CSS_ACTIVE : CSS_EMPTY)">
                        üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã
                    </button>
                    <button @onclick="() => activeTab = TAB_SETTINGS" 
                            class="nav-btn @(activeTab == TAB_SETTINGS ? CSS_ACTIVE : CSS_EMPTY)">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </nav>
            </div>

            <div class="admin-content">
                @if (activeTab == TAB_CONTENT)
                {
                    <div class="content-tab">
                        <h2>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</h2>
                        
                        <div class="content-section">
                            <h3>üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
                            <div class="form-group">
                                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞:</label>
                                <input @bind="siteTitle" @bind:event="oninput" placeholder="Marketing Insights" />
                            </div>
                            <div class="form-group">
                                <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                                <input @bind="siteSubtitle" @bind:event="oninput" placeholder="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è" />
                            </div>
                            <div class="form-group">
                                <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                                <textarea @bind="siteDescription" @bind:event="oninput" rows="3" 
                                          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞..."></textarea>
                            </div>
                            <button @onclick="SaveSiteContent" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>

                        <div class="content-section">
                            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                            <div class="stats-grid">
                                <div class="stat-card">
                                    <div class="stat-number">@totalPages</div>
                                    <div class="stat-label">–°—Ç—Ä–∞–Ω–∏—Ü</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-number">@totalContent</div>
                                    <div class="stat-label">–ë–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-number">@lastUpdate.ToString("dd.MM.yyyy")</div>
                                    <div class="stat-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == TAB_PAGES)
                {
                    <div class="pages-tab">
                        <h2>üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏</h2>
                        
                        <div class="pages-list">
                            @foreach (var page in pages)
                            {
                                <div class="page-item">
                                    <div class="page-info">
                                        <h4>@(page.Title)</h4>
                                        <p>@(page.Description)</p>
                                        <small>URL: @(page.Url)</small>
                                    </div>
                                    <div class="page-actions">
                                        <button @onclick="() => EditPage(page)" class="edit-btn">‚úèÔ∏è</button>
                                        <button @onclick="() => DeletePage(page)" class="delete-btn">üóëÔ∏è</button>
                                    </div>
                                </div>
                            }
                        </div>

                        <button @onclick="AddNewPage" class="add-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                    </div>
                }
                else if (activeTab == TAB_SETTINGS)
                {
                    <div class="settings-tab">
                        <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞</h2>
                        
                        <div class="settings-section">
                            <h3>üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
                            <div class="form-group">
                                <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç:</label>
                                <input type="color" @bind="primaryColor" @bind:event="oninput" />
                            </div>
                            <div class="form-group">
                                <label>–õ–æ–≥–æ—Ç–∏–ø:</label>
                                <input type="file" accept="image/*" @onchange="HandleLogoUpload" />
                            </div>
                        </div>

                        <div class="settings-section">
                            <h3>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
                            <div class="form-group">
                                <label>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:</label>
                                <input type="password" @bind="newPassword" @bind:event="oninput" 
                                       placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" />
                                <button @onclick="ChangePassword" class="change-pwd-btn">üîë –ò–∑–º–µ–Ω–∏—Ç—å</button>
                            </div>
                        </div>

                        <button @onclick="SaveSettings" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                    </div>
                }
            </div>
        </main>
    </div>
}

@code {
    private bool isAuthenticated = false;
    private string activeTab = "content";
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    private const string TAB_CONTENT = "content";
    private const string TAB_PAGES = "pages";
    private const string TAB_SETTINGS = "settings";
    
    // CSS –∫–ª–∞—Å—Å—ã
    private const string CSS_ACTIVE = "active";
    private const string CSS_EMPTY = "";
    
    // –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞
    private string siteTitle = "Marketing Insights";
    private string siteSubtitle = "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è";
    private string siteDescription = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞";
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private int totalPages = 5;
    private int totalContent = 12;
    private DateTime lastUpdate = DateTime.Now;
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã
    private List<PageInfo> pages = new()
    {
        new PageInfo { Title = "–ì–ª–∞–≤–Ω–∞—è", Description = "–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", Url = "/" },
        new PageInfo { Title = "–£—Å–ª—É–≥–∏", Description = "–ù–∞—à–∏ —É—Å–ª—É–≥–∏", Url = "/services" },
        new PageInfo { Title = "–û –Ω–∞—Å", Description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏", Url = "/about" },
        new PageInfo { Title = "–ö–æ–Ω—Ç–∞–∫—Ç—ã", Description = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", Url = "/contact" },
        new PageInfo { Title = "–ë–ª–æ–≥", Description = "–°—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏", Url = "/blog" }
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    private string primaryColor = "#1e40af";
    private string newPassword = "";

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var authStatus = await JS.InvokeAsync<string>("localStorage.getItem", "adminAuthenticated");
            isAuthenticated = authStatus == "true";
            
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/admin/login");
            }
        }
        catch
        {
            NavigationManager.NavigateTo("/admin/login");
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "adminAuthenticated");
        NavigationManager.NavigateTo("/admin/login");
    }

    private async Task SaveSiteContent()
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        await Task.Delay(500);
        lastUpdate = DateTime.Now;
        StateHasChanged();
    }

    private void EditPage(PageInfo page)
    {
        // –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    private void DeletePage(PageInfo page)
    {
        pages.Remove(page);
        totalPages = pages.Count;
        StateHasChanged();
    }

    private void AddNewPage()
    {
        pages.Add(new PageInfo 
        { 
            Title = "–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 
            Description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", 
            Url = "/new-page" 
        });
        totalPages = pages.Count;
        StateHasChanged();
    }

    private void HandleLogoUpload()
    {
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    }

    private async Task ChangePassword()
    {
        if (!string.IsNullOrEmpty(newPassword))
        {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            await Task.Delay(500);
            newPassword = "";
            StateHasChanged();
        }
    }

    private async Task SaveSettings()
    {
        // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await Task.Delay(500);
        StateHasChanged();
    }

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;

    public class PageInfo
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Url { get; set; } = "";
    }
}
